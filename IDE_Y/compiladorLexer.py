# Generated from ./MiniJava.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,218,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
        1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,4,19,148,8,19,11,19,12,19,
        149,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,25,1,25,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,
        1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,
        1,34,1,34,1,35,1,35,5,35,207,8,35,10,35,12,35,210,9,35,1,36,4,36,
        213,8,36,11,36,12,36,214,1,36,1,36,0,0,37,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,1,0,3,3,0,
        65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
        32,220,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,
        0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,1,75,1,0,0,0,3,77,1,0,0,0,5,79,1,0,0,
        0,7,81,1,0,0,0,9,83,1,0,0,0,11,85,1,0,0,0,13,87,1,0,0,0,15,89,1,
        0,0,0,17,96,1,0,0,0,19,104,1,0,0,0,21,114,1,0,0,0,23,118,1,0,0,0,
        25,125,1,0,0,0,27,130,1,0,0,0,29,136,1,0,0,0,31,138,1,0,0,0,33,140,
        1,0,0,0,35,142,1,0,0,0,37,144,1,0,0,0,39,147,1,0,0,0,41,151,1,0,
        0,0,43,155,1,0,0,0,45,158,1,0,0,0,47,163,1,0,0,0,49,169,1,0,0,0,
        51,174,1,0,0,0,53,180,1,0,0,0,55,183,1,0,0,0,57,186,1,0,0,0,59,188,
        1,0,0,0,61,191,1,0,0,0,63,194,1,0,0,0,65,197,1,0,0,0,67,200,1,0,
        0,0,69,202,1,0,0,0,71,204,1,0,0,0,73,212,1,0,0,0,75,76,5,61,0,0,
        76,2,1,0,0,0,77,78,5,40,0,0,78,4,1,0,0,0,79,80,5,41,0,0,80,6,1,0,
        0,0,81,82,5,43,0,0,82,8,1,0,0,0,83,84,5,45,0,0,84,10,1,0,0,0,85,
        86,5,42,0,0,86,12,1,0,0,0,87,88,5,47,0,0,88,14,1,0,0,0,89,90,5,112,
        0,0,90,91,5,117,0,0,91,92,5,98,0,0,92,93,5,108,0,0,93,94,5,105,0,
        0,94,95,5,99,0,0,95,16,1,0,0,0,96,97,5,112,0,0,97,98,5,114,0,0,98,
        99,5,105,0,0,99,100,5,118,0,0,100,101,5,97,0,0,101,102,5,116,0,0,
        102,103,5,101,0,0,103,18,1,0,0,0,104,105,5,112,0,0,105,106,5,114,
        0,0,106,107,5,111,0,0,107,108,5,116,0,0,108,109,5,101,0,0,109,110,
        5,99,0,0,110,111,5,116,0,0,111,112,5,101,0,0,112,113,5,100,0,0,113,
        20,1,0,0,0,114,115,5,105,0,0,115,116,5,110,0,0,116,117,5,116,0,0,
        117,22,1,0,0,0,118,119,5,100,0,0,119,120,5,111,0,0,120,121,5,117,
        0,0,121,122,5,98,0,0,122,123,5,108,0,0,123,124,5,101,0,0,124,24,
        1,0,0,0,125,126,5,118,0,0,126,127,5,111,0,0,127,128,5,105,0,0,128,
        129,5,100,0,0,129,26,1,0,0,0,130,131,5,99,0,0,131,132,5,108,0,0,
        132,133,5,97,0,0,133,134,5,115,0,0,134,135,5,115,0,0,135,28,1,0,
        0,0,136,137,5,123,0,0,137,30,1,0,0,0,138,139,5,125,0,0,139,32,1,
        0,0,0,140,141,5,44,0,0,141,34,1,0,0,0,142,143,5,59,0,0,143,36,1,
        0,0,0,144,145,5,46,0,0,145,38,1,0,0,0,146,148,2,48,57,0,147,146,
        1,0,0,0,148,149,1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,40,1,
        0,0,0,151,152,3,39,19,0,152,153,3,37,18,0,153,154,3,39,19,0,154,
        42,1,0,0,0,155,156,5,105,0,0,156,157,5,102,0,0,157,44,1,0,0,0,158,
        159,5,101,0,0,159,160,5,108,0,0,160,161,5,115,0,0,161,162,5,101,
        0,0,162,46,1,0,0,0,163,164,5,119,0,0,164,165,5,104,0,0,165,166,5,
        105,0,0,166,167,5,108,0,0,167,168,5,101,0,0,168,48,1,0,0,0,169,170,
        5,116,0,0,170,171,5,114,0,0,171,172,5,117,0,0,172,173,5,101,0,0,
        173,50,1,0,0,0,174,175,5,102,0,0,175,176,5,97,0,0,176,177,5,108,
        0,0,177,178,5,115,0,0,178,179,5,101,0,0,179,52,1,0,0,0,180,181,5,
        38,0,0,181,182,5,38,0,0,182,54,1,0,0,0,183,184,5,124,0,0,184,185,
        5,124,0,0,185,56,1,0,0,0,186,187,5,33,0,0,187,58,1,0,0,0,188,189,
        5,61,0,0,189,190,5,61,0,0,190,60,1,0,0,0,191,192,5,33,0,0,192,193,
        5,61,0,0,193,62,1,0,0,0,194,195,5,60,0,0,195,196,5,61,0,0,196,64,
        1,0,0,0,197,198,5,62,0,0,198,199,5,61,0,0,199,66,1,0,0,0,200,201,
        5,60,0,0,201,68,1,0,0,0,202,203,5,62,0,0,203,70,1,0,0,0,204,208,
        7,0,0,0,205,207,7,1,0,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,
        1,0,0,0,208,209,1,0,0,0,209,72,1,0,0,0,210,208,1,0,0,0,211,213,7,
        2,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,
        0,0,0,215,216,1,0,0,0,216,217,6,36,0,0,217,74,1,0,0,0,4,0,149,208,
        214,1,6,0,0
    ]

class compiladorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    PUBLIC = 8
    PRIVATE = 9
    PROTECTED = 10
    INT = 11
    DOUBLE = 12
    VOID = 13
    CLASS = 14
    OCURLYB = 15
    CCURLYB = 16
    COMMA = 17
    SEMICOLON = 18
    DOT = 19
    CINT = 20
    CFLOAT = 21
    IF = 22
    ELSE = 23
    WHILE = 24
    TRUE = 25
    FALSE = 26
    AND = 27
    OR = 28
    NOT = 29
    EQ = 30
    NE = 31
    LE = 32
    GE = 33
    LT = 34
    GT = 35
    ID = 36
    WS = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'public'", 
            "'private'", "'protected'", "'int'", "'double'", "'void'", "'class'", 
            "'{'", "'}'", "','", "';'", "'.'", "'if'", "'else'", "'while'", 
            "'true'", "'false'", "'&&'", "'||'", "'!'", "'=='", "'!='", 
            "'<='", "'>='", "'<'", "'>'" ]

    symbolicNames = [ "<INVALID>",
            "PUBLIC", "PRIVATE", "PROTECTED", "INT", "DOUBLE", "VOID", "CLASS", 
            "OCURLYB", "CCURLYB", "COMMA", "SEMICOLON", "DOT", "CINT", "CFLOAT", 
            "IF", "ELSE", "WHILE", "TRUE", "FALSE", "AND", "OR", "NOT", 
            "EQ", "NE", "LE", "GE", "LT", "GT", "ID", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "PUBLIC", "PRIVATE", "PROTECTED", "INT", "DOUBLE", "VOID", 
                  "CLASS", "OCURLYB", "CCURLYB", "COMMA", "SEMICOLON", "DOT", 
                  "CINT", "CFLOAT", "IF", "ELSE", "WHILE", "TRUE", "FALSE", 
                  "AND", "OR", "NOT", "EQ", "NE", "LE", "GE", "LT", "GT", 
                  "ID", "WS" ]

    grammarFileName = "MiniJava.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


